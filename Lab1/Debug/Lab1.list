
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000454  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005e8  080005e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005e8  080005e8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005e8  080005e8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005e8  080005e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e8  080005e8  000105e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005ec  080005ec  000105ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005f0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080005f4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005f4  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c01  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000672  00000000  00000000  00021c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  000222a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c0  00000000  00000000  000224b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ad9  00000000  00000000  00022670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002091  00000000  00000000  00036149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dc5a  00000000  00000000  000381da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5e34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000658  00000000  00000000  000b5e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005d0 	.word	0x080005d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080005d0 	.word	0x080005d0

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <EXTI0_IRQHandler>:


volatile uint8_t player1_pressed = 0;
volatile uint8_t player2_pressed = 0;

void EXTI0_IRQHandler(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR0) {
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <EXTI0_IRQHandler+0x2c>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	f003 0301 	and.w	r3, r3, #1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d008      	beq.n	8000286 <EXTI0_IRQHandler+0x22>
        EXTI->PR |= EXTI_PR_PR0;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <EXTI0_IRQHandler+0x2c>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a05      	ldr	r2, [pc, #20]	; (8000290 <EXTI0_IRQHandler+0x2c>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6153      	str	r3, [r2, #20]
        player1_pressed = 1;
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <EXTI0_IRQHandler+0x30>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
    }
}
 8000286:	bf00      	nop
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	40013c00 	.word	0x40013c00
 8000294:	20000020 	.word	0x20000020

08000298 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR2) {
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <EXTI2_IRQHandler+0x2c>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	f003 0304 	and.w	r3, r3, #4
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d008      	beq.n	80002ba <EXTI2_IRQHandler+0x22>
        EXTI->PR |= EXTI_PR_PR2;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <EXTI2_IRQHandler+0x2c>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <EXTI2_IRQHandler+0x2c>)
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	6153      	str	r3, [r2, #20]
        player2_pressed = 1;
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <EXTI2_IRQHandler+0x30>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
    }
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	40013c00 	.word	0x40013c00
 80002c8:	20000021 	.word	0x20000021

080002cc <init_GPIO>:

void init_GPIO() {
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
    // Enable GPIO clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002d0:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <init_GPIO+0x7c>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d4:	4a1c      	ldr	r2, [pc, #112]	; (8000348 <init_GPIO+0x7c>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure player 1 button pin as input with pull-up
    GPIOA->MODER &= ~GPIO_MODER_MODER0;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <init_GPIO+0x80>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1a      	ldr	r2, [pc, #104]	; (800034c <init_GPIO+0x80>)
 80002e2:	f023 0303 	bic.w	r3, r3, #3
 80002e6:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_0;
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <init_GPIO+0x80>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a17      	ldr	r2, [pc, #92]	; (800034c <init_GPIO+0x80>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	60d3      	str	r3, [r2, #12]

    // Configure player 2 button pin as input with pull-up
    GPIOA->MODER &= ~GPIO_MODER_MODER2;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <init_GPIO+0x80>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a14      	ldr	r2, [pc, #80]	; (800034c <init_GPIO+0x80>)
 80002fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80002fe:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= GPIO_PUPDR_PUPDR2_0;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <init_GPIO+0x80>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a11      	ldr	r2, [pc, #68]	; (800034c <init_GPIO+0x80>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	60d3      	str	r3, [r2, #12]

    // Configure player 1 LED pin as output
    GPIOA->MODER &= ~GPIO_MODER_MODER1;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <init_GPIO+0x80>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a0e      	ldr	r2, [pc, #56]	; (800034c <init_GPIO+0x80>)
 8000312:	f023 030c 	bic.w	r3, r3, #12
 8000316:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER1_0;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <init_GPIO+0x80>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <init_GPIO+0x80>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6013      	str	r3, [r2, #0]

    // Configure player 2 LED pin as output
    GPIOA->MODER &= ~GPIO_MODER_MODER3;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <init_GPIO+0x80>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a08      	ldr	r2, [pc, #32]	; (800034c <init_GPIO+0x80>)
 800032a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800032e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER3_0;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <init_GPIO+0x80>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a05      	ldr	r2, [pc, #20]	; (800034c <init_GPIO+0x80>)
 8000336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800033a:	6013      	str	r3, [r2, #0]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40023800 	.word	0x40023800
 800034c:	40020000 	.word	0x40020000

08000350 <init_EXTI>:

void init_EXTI() {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
    // Enable SYSCFG clock
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000354:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <init_EXTI+0x80>)
 8000356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000358:	4a1d      	ldr	r2, [pc, #116]	; (80003d0 <init_EXTI+0x80>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6453      	str	r3, [r2, #68]	; 0x44

    // Connect EXTI0 to player 1 button pin
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_Msk;
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <init_EXTI+0x84>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4a1b      	ldr	r2, [pc, #108]	; (80003d4 <init_EXTI+0x84>)
 8000366:	f023 030f 	bic.w	r3, r3, #15
 800036a:	6093      	str	r3, [r2, #8]

    // Connect EXTI2 to player 2 button pin
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2_Msk;
 800036c:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <init_EXTI+0x84>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	4a18      	ldr	r2, [pc, #96]	; (80003d4 <init_EXTI+0x84>)
 8000372:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000376:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PA;
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <init_EXTI+0x84>)
 800037a:	4a16      	ldr	r2, [pc, #88]	; (80003d4 <init_EXTI+0x84>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	6093      	str	r3, [r2, #8]

    // Configure EXTI0 to trigger on rising edge
    EXTI->RTSR |= EXTI_RTSR_TR0;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <init_EXTI+0x88>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <init_EXTI+0x88>)
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	6093      	str	r3, [r2, #8]

    // Configure EXTI2 to trigger on rising edge
    EXTI->RTSR |= EXTI_RTSR_TR2;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <init_EXTI+0x88>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	4a11      	ldr	r2, [pc, #68]	; (80003d8 <init_EXTI+0x88>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6093      	str	r3, [r2, #8]

    // Enable EXTI0 interrupt
    EXTI->IMR |= EXTI_IMR_MR0;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <init_EXTI+0x88>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <init_EXTI+0x88>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6013      	str	r3, [r2, #0]

    // Enable EXTI2 interrupt
    EXTI->IMR |= EXTI_IMR_MR2;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <init_EXTI+0x88>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <init_EXTI+0x88>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6013      	str	r3, [r2, #0]

    // Set EXTI0 interrupt priority to the highest
    NVIC_SetPriority(EXTI0_IRQn, 0);
 80003b0:	2100      	movs	r1, #0
 80003b2:	2006      	movs	r0, #6
 80003b4:	f7ff ff2c 	bl	8000210 <__NVIC_SetPriority>

    // Set EXTI2 interrupt priority to the highest
    NVIC_SetPriority(EXTI2_IRQn, 0);
 80003b8:	2100      	movs	r1, #0
 80003ba:	2008      	movs	r0, #8
 80003bc:	f7ff ff28 	bl	8000210 <__NVIC_SetPriority>

    // Enable EXTI0 interrupt in NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 80003c0:	2006      	movs	r0, #6
 80003c2:	f7ff ff07 	bl	80001d4 <__NVIC_EnableIRQ>

    // Enable EXTI2 interrupt in NVIC
    NVIC_EnableIRQ(EXTI2_IRQn);
 80003c6:	2008      	movs	r0, #8
 80003c8:	f7ff ff04 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40023800 	.word	0x40023800
 80003d4:	40013800 	.word	0x40013800
 80003d8:	40013c00 	.word	0x40013c00

080003dc <delay>:

void delay(uint32_t ms) {
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	e003      	b.n	80003f2 <delay+0x16>
        __NOP();
 80003ea:	bf00      	nop
    for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	3301      	adds	r3, #1
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003f8:	fb03 f202 	mul.w	r2, r3, r2
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d8f3      	bhi.n	80003ea <delay+0xe>
    }
}
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <main>:

int main(void) {
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    // Initialize GPIO and EXTI
    init_GPIO();
 8000414:	f7ff ff5a 	bl	80002cc <init_GPIO>
    init_EXTI();
 8000418:	f7ff ff9a 	bl	8000350 <init_EXTI>

    while (1) {
        player1_pressed = 0;
 800041c:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <main+0x78>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
        player2_pressed = 0;
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <main+0x7c>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]

        // Wait for both players to press their buttons
        while (!(player1_pressed && player2_pressed));
 8000428:	bf00      	nop
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <main+0x78>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0fa      	beq.n	800042a <main+0x1a>
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <main+0x7c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	b2db      	uxtb	r3, r3
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f5      	beq.n	800042a <main+0x1a>

        // Determine the winner based on who pressed the button first
        if (player1_pressed) {
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <main+0x78>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00a      	beq.n	800045e <main+0x4e>
            GPIOA->BSRR = LED1_Pin;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <main+0x80>)
 800044a:	2202      	movs	r2, #2
 800044c:	619a      	str	r2, [r3, #24]
            delay(1000);
 800044e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000452:	f7ff ffc3 	bl	80003dc <delay>
            GPIOA->BSRR = LED1_Pin << 16;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <main+0x80>)
 8000458:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800045c:	619a      	str	r2, [r3, #24]
        }

        if (player2_pressed) {
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <main+0x7c>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d00a      	beq.n	800047e <main+0x6e>
            GPIOA->BSRR = LED2_Pin;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <main+0x80>)
 800046a:	2208      	movs	r2, #8
 800046c:	619a      	str	r2, [r3, #24]
            delay(1000);
 800046e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000472:	f7ff ffb3 	bl	80003dc <delay>
            GPIOA->BSRR = LED2_Pin << 16;
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <main+0x80>)
 8000478:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800047c:	619a      	str	r2, [r3, #24]
        }

        delay(2000);
 800047e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000482:	f7ff ffab 	bl	80003dc <delay>
        player1_pressed = 0;
 8000486:	e7c9      	b.n	800041c <main+0xc>
 8000488:	20000020 	.word	0x20000020
 800048c:	20000021 	.word	0x20000021
 8000490:	40020000 	.word	0x40020000

08000494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <NMI_Handler+0x4>

0800049a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <MemManage_Handler+0x4>

080004a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <BusFault_Handler+0x4>

080004ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <UsageFault_Handler+0x4>

080004b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e0:	f000 f83e 	bl	8000560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <SystemInit+0x20>)
 80004ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f2:	4a05      	ldr	r2, [pc, #20]	; (8000508 <SystemInit+0x20>)
 80004f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800050c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000544 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000512:	490e      	ldr	r1, [pc, #56]	; (800054c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000528:	4c0b      	ldr	r4, [pc, #44]	; (8000558 <LoopFillZerobss+0x26>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000536:	f7ff ffd7 	bl	80004e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053a:	f000 f825 	bl	8000588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800053e:	f7ff ff67 	bl	8000410 <main>
  bx  lr    
 8000542:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000544:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000550:	080005f0 	.word	0x080005f0
  ldr r2, =_sbss
 8000554:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000558:	20000028 	.word	0x20000028

0800055c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC_IRQHandler>
	...

08000560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_IncTick+0x20>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_IncTick+0x24>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4413      	add	r3, r2
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_IncTick+0x24>)
 8000572:	6013      	str	r3, [r2, #0]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000000 	.word	0x20000000
 8000584:	20000024 	.word	0x20000024

08000588 <__libc_init_array>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	4d0d      	ldr	r5, [pc, #52]	; (80005c0 <__libc_init_array+0x38>)
 800058c:	4c0d      	ldr	r4, [pc, #52]	; (80005c4 <__libc_init_array+0x3c>)
 800058e:	1b64      	subs	r4, r4, r5
 8000590:	10a4      	asrs	r4, r4, #2
 8000592:	2600      	movs	r6, #0
 8000594:	42a6      	cmp	r6, r4
 8000596:	d109      	bne.n	80005ac <__libc_init_array+0x24>
 8000598:	4d0b      	ldr	r5, [pc, #44]	; (80005c8 <__libc_init_array+0x40>)
 800059a:	4c0c      	ldr	r4, [pc, #48]	; (80005cc <__libc_init_array+0x44>)
 800059c:	f000 f818 	bl	80005d0 <_init>
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	10a4      	asrs	r4, r4, #2
 80005a4:	2600      	movs	r6, #0
 80005a6:	42a6      	cmp	r6, r4
 80005a8:	d105      	bne.n	80005b6 <__libc_init_array+0x2e>
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b0:	4798      	blx	r3
 80005b2:	3601      	adds	r6, #1
 80005b4:	e7ee      	b.n	8000594 <__libc_init_array+0xc>
 80005b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ba:	4798      	blx	r3
 80005bc:	3601      	adds	r6, #1
 80005be:	e7f2      	b.n	80005a6 <__libc_init_array+0x1e>
 80005c0:	080005e8 	.word	0x080005e8
 80005c4:	080005e8 	.word	0x080005e8
 80005c8:	080005e8 	.word	0x080005e8
 80005cc:	080005ec 	.word	0x080005ec

080005d0 <_init>:
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	bf00      	nop
 80005d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d6:	bc08      	pop	{r3}
 80005d8:	469e      	mov	lr, r3
 80005da:	4770      	bx	lr

080005dc <_fini>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	bf00      	nop
 80005e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e2:	bc08      	pop	{r3}
 80005e4:	469e      	mov	lr, r3
 80005e6:	4770      	bx	lr
